{"version":3,"file":"static/js/537.6bd5af73.chunk.js","mappings":"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","sources":["Components/UserSlide..jsx","../node_modules/@mui/icons-material/PersonAdd.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IconButton, tableSortLabelClasses } from '@mui/material';\r\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useUser } from '@clerk/clerk-react';\r\nimport parse from 'html-react-parser';\r\n\r\nexport default function UserSlide({ user, add, serverUser, highlight }) {\r\n\r\n    const { user: currentUser } = useUser();\r\n\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const handleUserClick = () => {\r\n        navigate(`/chats/${user.username}`)\r\n    };\r\n\r\n    const [lastMessage, setLastMessage] = useState('');\r\n    const [roomId, setRoomId] = useState('');\r\n\r\n\r\n    function concatenateAndSortByCharacter(email1, email2) {\r\n        let concatenatedEmails = email1 + email2;\r\n        let charArray = concatenatedEmails.split('');\r\n        charArray.sort();\r\n        let sortedEmails = charArray.join('');\r\n        return sortedEmails;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (user?.email_addresses?.[0].email_address && currentUser?.primaryEmailAddress.emailAddress) {\r\n            let selectedUserEmail = user?.email_addresses[0].email_address;\r\n            let userEmail = currentUser?.primaryEmailAddress.emailAddress;\r\n            let conversationId = concatenateAndSortByCharacter(selectedUserEmail, userEmail)\r\n            setRoomId(conversationId);\r\n        }\r\n    }, [currentUser, user]);\r\n\r\n\r\n    const fetchConversation = async (roomId) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/conversation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ conversationId: roomId }),\r\n            });\r\n            if (!response.ok) {\r\n                console.log('Error:', response.status, response.statusText);\r\n                return;\r\n            } else {\r\n                const conversationData = await response.json();\r\n                if (conversationData && conversationData.conversation.length > 0) {\r\n                    const lastMessage = conversationData.conversation[conversationData.conversation.length - 1];\r\n                    setLastMessage(lastMessage.message);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching session:', error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchConversation(roomId);\r\n    }, [roomId])\r\n\r\n    return (\r\n        <div style={highlight && user.username === location.pathname.split('/').pop() ? {\r\n            backgroundColor: 'var(--primary-blue1)'\r\n        } : null}\r\n            id={user.email_addresses[0].email_address} className='userSlide' onClick={(e) => {\r\n                if(serverUser?.friendList?.includes(user?.email_addresses[0].email_address)){\r\n                    handleUserClick();\r\n                }else{\r\n                    alert(`Sorry, ${user.username} is not a friend.`);\r\n                }\r\n            }}>\r\n            <img height={35} width={35} className='avatarImage' src={user.image_url} alt={`${user.username}'s_Image`} />\r\n\r\n            <div className='userDetails'>\r\n                <h3>{user.username}</h3>\r\n                {lastMessage && <h5>{parse(lastMessage)}</h5>}\r\n            </div>\r\n            {\r\n                add && !serverUser?.friendList?.includes(user?.email_addresses[0].email_address) ?\r\n                    <IconButton onClick={() => {\r\n                        if (user?.email_addresses[0].email_address) {\r\n                            alert(user.username);\r\n                        } else {\r\n                            console.log('id Hani');\r\n                        }\r\n                    }}>\r\n                        <PersonAddIcon></PersonAddIcon>\r\n                    </IconButton> : null\r\n            }\r\n        </div>\r\n    )\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m-9-2V7H4v3H1v2h3v3h2v-3h3v-2zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4\"\n}), 'PersonAdd');"],"names":["UserSlide","_ref","_serverUser$friendLis2","user","add","serverUser","highlight","currentUser","useUser","navigate","useNavigate","location","useLocation","lastMessage","setLastMessage","useState","roomId","setRoomId","useEffect","_user$email_addresses","email_addresses","email_address","primaryEmailAddress","emailAddress","conversationId","email1","email2","charArray","split","sort","join","concatenateAndSortByCharacter","async","response","fetch","concat","process","method","headers","body","JSON","stringify","ok","console","log","status","statusText","conversationData","json","conversation","length","message","error","fetchConversation","_jsxs","style","username","pathname","pop","backgroundColor","id","className","onClick","e","_serverUser$friendLis","friendList","includes","alert","children","_jsx","height","width","src","image_url","alt","parse","IconButton","PersonAddIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}