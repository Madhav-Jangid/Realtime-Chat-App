{"version":3,"file":"static/js/537.75354ea4.chunk.js","mappings":"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","sources":["Components/UserSlide..jsx","../node_modules/@mui/icons-material/PersonAdd.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { IconButton, tableSortLabelClasses } from '@mui/material';\r\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useUser } from '@clerk/clerk-react';\r\nimport parse from 'html-react-parser';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\n\r\n\r\n\r\nexport default function UserSlide({ user, add, serverUser, highlight }) {\r\n\r\n    const { user: currentUser } = useUser();\r\n\r\n    const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\r\n\r\n    const navigate = useNavigate();\r\n    const location = useLocation();\r\n\r\n    const handleUserClick = () => {\r\n        navigate(`/chats/${user.username}`)\r\n    };\r\n\r\n    const [requestStatus, setRequestStatus] = useState(false);\r\n    const [lastMessage, setLastMessage] = useState('');\r\n    const [roomId, setRoomId] = useState('');\r\n\r\n\r\n    function concatenateAndSortByCharacter(email1, email2) {\r\n        let concatenatedEmails = email1 + email2;\r\n        let charArray = concatenatedEmails.split('');\r\n        charArray.sort();\r\n        let sortedEmails = charArray.join('');\r\n        return sortedEmails;\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (user?.email_addresses?.[0].email_address && currentUser?.primaryEmailAddress.emailAddress) {\r\n            let selectedUserEmail = user?.email_addresses[0].email_address;\r\n            let userEmail = currentUser?.primaryEmailAddress.emailAddress;\r\n            let conversationId = concatenateAndSortByCharacter(selectedUserEmail, userEmail)\r\n            setRoomId(conversationId);\r\n        }\r\n    }, [currentUser, user]);\r\n\r\n\r\n    const fetchConversation = async (roomId) => {\r\n        try {\r\n            const response = await fetch(`${BACKEND_URL}/conversation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ conversationId: roomId }),\r\n            });\r\n            if (!response.ok) {\r\n                console.log('Error:', response.status, response.statusText);\r\n                return;\r\n            } else {\r\n                const conversationData = await response.json();\r\n                if (conversationData && conversationData.conversation.length > 0) {\r\n                    const lastMessage = conversationData.conversation[conversationData.conversation.length - 1];\r\n                    setLastMessage(lastMessage.message);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching session:', error);\r\n        }\r\n    };\r\n\r\n\r\n    const sendFriendRequest = async () => {\r\n        try {\r\n            const response = await fetch(`${BACKEND_URL}/addFriend`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username: serverUser?.name,\r\n                    sendername: user?.username,\r\n                    user: serverUser?.email,\r\n                    isAccepted: false,\r\n                    to: user?.email_addresses[0]?.email_address,\r\n                }),\r\n            });\r\n            if (!response.ok) {\r\n                const data = await response.json();\r\n                if (data.already) {\r\n                    alert(data.message);\r\n                } else {\r\n                    console.log(data);\r\n                }\r\n                return;\r\n            } else {\r\n                const requestStatus = await response.json();\r\n                if (requestStatus.status) {\r\n                    setRequestStatus(true);\r\n                    alert(requestStatus.message);\r\n                } else {\r\n                    console.log(requestStatus.message);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        fetchConversation(roomId);\r\n    }, [roomId])\r\n\r\n    return (\r\n        <div style={highlight && user.username === location.pathname.split('/').pop() ? {\r\n            backgroundColor: 'var(--primary-blue1)'\r\n        } : null}\r\n            id={user.email_addresses[0].email_address} className='userSlide' onClick={(e) => {\r\n                if (serverUser?.friendList?.includes(user?.email_addresses[0].email_address)) {\r\n                    handleUserClick();\r\n                }\r\n            }}>\r\n            <img height={35} width={35} className='avatarImage' src={user.image_url} alt={`${user.username}'s_Image`} />\r\n\r\n            <div className='userDetails'>\r\n                <h3>{user.username}</h3>\r\n                {lastMessage && <h5>{lastMessage.replace(/<br \\/>/g,\"..\")}</h5>}\r\n            </div>\r\n            {\r\n                add && !serverUser?.friendList?.includes(user?.email_addresses[0].email_address) ?\r\n                    <IconButton onClick={() => {\r\n                        if (user?.email_addresses[0].email_address) {\r\n                            sendFriendRequest();\r\n                        } else {\r\n                            console.log('id Hani');\r\n                        }\r\n                    }}>\r\n                        {!requestStatus ?\r\n                            <PersonAddIcon></PersonAddIcon> :\r\n                            <DoneIcon />\r\n                        }\r\n                    </IconButton> : null\r\n            }\r\n        </div>\r\n    )\r\n}","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4m-9-2V7H4v3H1v2h3v3h2v-3h3v-2zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4\"\n}), 'PersonAdd');"],"names":["UserSlide","_ref","_serverUser$friendLis2","user","add","serverUser","highlight","currentUser","useUser","BACKEND_URL","process","navigate","useNavigate","location","useLocation","requestStatus","setRequestStatus","useState","lastMessage","setLastMessage","roomId","setRoomId","useEffect","_user$email_addresses","email_addresses","email_address","primaryEmailAddress","emailAddress","conversationId","email1","email2","charArray","split","sort","join","concatenateAndSortByCharacter","async","response","fetch","concat","method","headers","body","JSON","stringify","ok","console","log","status","statusText","conversationData","json","conversation","length","message","error","fetchConversation","_jsxs","style","username","pathname","pop","backgroundColor","id","className","onClick","e","_serverUser$friendLis","friendList","includes","children","_jsx","height","width","src","image_url","alt","replace","IconButton","_user$email_addresses2","name","sendername","email","isAccepted","to","data","already","alert","err","sendFriendRequest","DoneIcon","PersonAddIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}