{"version":3,"file":"static/js/228.22461d08.chunk.js","mappings":"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","sources":["Converstaion/ConvoDiv.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setNewMessage, clearNewMessage } from '../features/newMessage/newMessageSlice';\r\n\r\nexport default function ConvoDiv({ selectedUser, roomId, user }) {\r\n    const dispatch = useDispatch();\r\n    const newMessage = useSelector(state => state.newMessage); // Assuming newMessage state from Redux\r\n\r\n    const [conversation, setConversation] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchConversation(roomId);\r\n    }, [roomId]); // Fetch conversation on roomId change\r\n\r\n    useEffect(() => {\r\n        if (newMessage) {\r\n            // Add new message to conversation and update state\r\n            setConversation(prevConversation => [...prevConversation, newMessage]);\r\n            // Clear new message from Redux\r\n            dispatch(clearNewMessage());\r\n        }\r\n    }, [newMessage, dispatch]);\r\n\r\n    const formatStringForRendering = (inputString) => {\r\n        const urlRegex = /(https?:\\/\\/[^\\s]+)/;\r\n        const match = inputString?.match(urlRegex);\r\n\r\n        if (match) {\r\n            const url = match[0];\r\n            const message = inputString.replace(url, `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`);\r\n            return <span dangerouslySetInnerHTML={{ __html: message }} />;\r\n        } else {\r\n            return <span>{inputString}</span>;\r\n        }\r\n    };\r\n\r\n    const extractTimeFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const amOrPm = hours >= 12 ? 'PM' : 'AM';\r\n        const formattedHours = hours % 12 || 12;\r\n        const newDate = extractDateFromDate(dateString);\r\n        return `| ${newDate} | ${formattedHours}:${minutes < 10 ? '0' + minutes : minutes} ${amOrPm}`;\r\n    };\r\n\r\n    const extractDateFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const day = date.getDate();\r\n        const month = date.getMonth() + 1; // Months are zero-based, so we add 1\r\n        const year = date.getFullYear();\r\n        return `${day < 10 ? '0' + day : day}-${month < 10 ? '0' + month : month}-${year}`;\r\n    };\r\n\r\n    const fetchConversation = async (roomId) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/conversation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ conversationId: roomId }),\r\n            });\r\n            if (!response.ok) {\r\n                console.log('Error:', response.status, response.statusText);\r\n                return;\r\n            } else {\r\n                const conversationData = await response.json();\r\n                if (conversationData && conversationData.conversation.length > 0) {\r\n                    setConversation(conversationData.conversation);\r\n                } else {\r\n                    setConversation([]); // Set empty array if no conversation data\r\n                    const conversationDiv = document.getElementById('conversation');\r\n                    conversationDiv.innerHTML = `<div id=\"deaultConvo\">No conversation with ${selectedUser.username}</div>`;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching session:', error);\r\n        }\r\n    };\r\n\r\n    const parseMessage = (inputString) => {\r\n        const delimiter = '#$IMG$#';\r\n        const [message, url] = inputString?.split(delimiter); // Assuming inputString has the correct format\r\n\r\n        return { message, url }; // Return object with message and url properties\r\n    };\r\n\r\n    return (\r\n        <div id=\"conversation\" name=\"conversation\" className=\"conversation\">\r\n            {conversation && conversation.map((message, index) => {\r\n                const { message: messageText, url } = parseMessage(message?.message);\r\n                const linkMessage = formatStringForRendering(messageText);\r\n                const from = message.from;\r\n                const email = user?.primaryEmailAddress.emailAddress;\r\n\r\n                return (\r\n                    <div key={index} className={from === email ? 'messageFromCurrentUser' : 'messageFromSecondUser'}>\r\n                        <div className=\"avatarContainer\">\r\n                            <img src={from === email ? user.imageUrl : selectedUser.image_url} alt={from === email ? user.username + ' image' : selectedUser.username + ' image'} />\r\n                        </div>\r\n                        <div className=\"textMessageCont\">\r\n                            {/* <h6>{from === email ? user.username : selectedUser.username}</h6> */}\r\n                            <h4>{linkMessage}</h4>\r\n                            {url &&\r\n                                <>\r\n                                    <img loading=\"lazy\" src={url} alt={messageText} />\r\n                                    <h4>{messageText}</h4>\r\n                                </>\r\n                            }\r\n                            <span>{extractTimeFromDate(message.date)}</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["ConvoDiv","_ref","selectedUser","roomId","user","dispatch","useDispatch","newMessage","useSelector","state","conversation","setConversation","useState","useEffect","fetchConversation","prevConversation","clearNewMessage","extractTimeFromDate","dateString","date","Date","hours","getHours","minutes","getMinutes","amOrPm","formattedHours","newDate","extractDateFromDate","concat","day","getDate","month","getMonth","year","getFullYear","async","response","fetch","process","method","headers","body","JSON","stringify","conversationId","ok","console","log","status","statusText","conversationData","json","length","document","getElementById","innerHTML","username","error","_jsx","id","name","className","children","map","message","index","messageText","url","inputString","split","parseMessage","linkMessage","match","replace","dangerouslySetInnerHTML","__html","formatStringForRendering","from","email","primaryEmailAddress","emailAddress","_jsxs","src","imageUrl","image_url","alt","_Fragment","loading"],"sourceRoot":""}