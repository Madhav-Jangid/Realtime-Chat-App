{"version":3,"file":"static/js/228.3015d52d.chunk.js","mappings":"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","sources":["Converstaion/ConvoDiv.jsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { clearNewMessage } from '../features/newMessage/newMessageSlice';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { io } from 'socket.io-client';\r\nimport parse from 'html-react-parser';\r\n\r\nexport default function ConvoDiv({ state, selectedUser, roomId, user }) {\r\n    const socket = io(process.env.REACT_APP_BACKEND_URL);\r\n    const dispatch = useDispatch();\r\n    const newMessage = useSelector((state) => state.newMessage); // Assuming newMessage state from Redux\r\n    const [conversation, setConversation] = useState(null);\r\n    const divRef = useRef(null);\r\n    const [previousDate, setPreviousDate] = useState(null);\r\n\r\n    const scrollToBottom = () => {\r\n        if (divRef.current) {\r\n            divRef.current.scrollTop = divRef.current.scrollHeight - divRef.current.clientHeight;\r\n        }\r\n    };\r\n\r\n    const formatStringForRendering = (inputString) => {\r\n        const urlRegex = /(https?:\\/\\/[^\\s]+)/;\r\n        const match = inputString?.match(urlRegex);\r\n\r\n        if (match) {\r\n            const url = match[0];\r\n            const message = inputString.replace(url, `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`);\r\n            return message;\r\n        } else {\r\n            return inputString;\r\n        }\r\n    };\r\n\r\n    const extractTimeFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const amOrPm = hours >= 12 ? 'PM' : 'AM';\r\n        const formattedHours = hours % 12 || 12;\r\n        const newDate = extractDateFromDate(dateString);\r\n        return { date: newDate, time: `${formattedHours}:${minutes < 10 ? '0' + minutes : minutes} ${amOrPm}` };\r\n    };\r\n\r\n    const extractDateFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const day = date.getDate();\r\n        const month = date.getMonth() + 1; // Months are zero-based, so we add 1\r\n        const year = date.getFullYear();\r\n        return `${day < 10 ? '0' + day : day}-${month < 10 ? '0' + month : month}-${year}`;\r\n    };\r\n\r\n    const fetchConversation = async (roomId) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/conversation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ conversationId: roomId }),\r\n            });\r\n            if (!response.ok) {\r\n                console.log('Error:', response.status, response.statusText);\r\n                return;\r\n            } else {\r\n                const conversationData = await response.json();\r\n                if (conversationData && conversationData.conversation.length > 0) {\r\n                    setConversation(conversationData.conversation);\r\n                } else {\r\n                    setConversation([]); // Set empty array if no conversation data\r\n                    const conversationDiv = document.getElementById('conversation');\r\n                    conversationDiv.innerHTML = `<div id=\"deaultConvo\">No conversation with ${selectedUser.username}</div>`;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching session:', error);\r\n        }\r\n    };\r\n\r\n    const parseMessage = (inputString) => {\r\n        const delimiter = '#$IMG$#';\r\n        const [message, url] = inputString?.split(delimiter); // Assuming inputString has the correct format\r\n        return { message, url }; // Return object with message and url properties\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchConversation(roomId);\r\n    }, [roomId]);\r\n\r\n    useEffect(() => {\r\n        if (selectedUser) {\r\n            setConversation(null);\r\n        }\r\n    }, [selectedUser]);\r\n\r\n    useEffect(() => {\r\n        if (newMessage) {\r\n            setConversation((prevConversation) => [...prevConversation, newMessage]);\r\n            dispatch(clearNewMessage());\r\n        }\r\n    }, [newMessage, dispatch]);\r\n\r\n    useEffect(() => {\r\n        socket.on('get_message', (data) => {\r\n            if (user.username === data.to.username) {\r\n                let newMessage = {\r\n                    date: new Date(),\r\n                    from: data.from.email,\r\n                    message: data.message,\r\n                };\r\n                setConversation((prevConversation) => [...prevConversation, newMessage]);\r\n                dispatch(clearNewMessage());\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            socket.off('get_message');\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [newMessage, conversation]);\r\n\r\n    const renderMessageContent = (messageText) => {\r\n        const messageWithLineBreaks = messageText.replace(/\\n/g, '<br />');\r\n        return `${messageWithLineBreaks}`;\r\n    };\r\n\r\n    return (\r\n        <div ref={divRef} id=\"conversation\" name=\"conversation\" className=\"conversation\">\r\n            {conversation ? (\r\n                conversation.map((message, index) => {\r\n                    const { message: messageText, url } = parseMessage(message?.message);\r\n                    const formattedMessage = formatStringForRendering(messageText);\r\n                    const renderedMessage = renderMessageContent(formattedMessage);\r\n                    const from = message.from;\r\n                    const email = user?.primaryEmailAddress.emailAddress;\r\n                    let date = extractTimeFromDate(message.date)?.time;\r\n\r\n                    return (\r\n                        <div key={index} className={from === email ? 'messageFromCurrentUser' : 'messageFromSecondUser'}>\r\n                            <div className=\"avatarContainer\">\r\n                                <img src={from === email ? user.imageUrl : selectedUser.image_url} alt={from === email ? user.username + ' image' : selectedUser.username + ' image'} />\r\n                            </div>\r\n                            <div className=\"textMessageCont\">\r\n                                <h4>{parse(renderedMessage)}</h4>\r\n                                {url && (\r\n                                    <>\r\n                                        <img loading=\"lazy\" src={url} alt={parse(messageText)} />\r\n                                        <h4>{parse(renderedMessage)}</h4>\r\n                                    </>\r\n                                )}\r\n                                <span>{date}</span>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })\r\n            ) : (\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        flexDirection: 'column',\r\n                        gap: 10,\r\n                    }}\r\n                    id=\"conversation\"\r\n                    name=\"conversation\"\r\n                    className=\"conversation\"\r\n                >\r\n                    <CircularProgress />\r\n                    <p>Loading...</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["ConvoDiv","_ref","state","selectedUser","roomId","user","socket","io","process","dispatch","useDispatch","newMessage","useSelector","conversation","setConversation","useState","divRef","useRef","previousDate","setPreviousDate","extractDateFromDate","dateString","date","Date","day","getDate","month","getMonth","year","getFullYear","concat","useEffect","async","response","fetch","method","headers","body","JSON","stringify","conversationId","ok","console","log","status","statusText","conversationData","json","length","document","getElementById","innerHTML","username","error","fetchConversation","prevConversation","clearNewMessage","on","data","to","from","email","message","off","current","scrollTop","scrollHeight","clientHeight","_jsx","ref","id","name","className","children","map","index","_extractTimeFromDate","messageText","url","inputString","split","parseMessage","formattedMessage","match","replace","formatStringForRendering","renderedMessage","messageWithLineBreaks","renderMessageContent","primaryEmailAddress","emailAddress","hours","getHours","minutes","getMinutes","amOrPm","formattedHours","time","extractTimeFromDate","_jsxs","src","imageUrl","image_url","alt","parse","_Fragment","loading","style","display","alignItems","justifyContent","flexDirection","gap","CircularProgress"],"sourceRoot":""}