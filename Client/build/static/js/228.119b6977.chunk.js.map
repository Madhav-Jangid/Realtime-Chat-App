{"version":3,"file":"static/js/228.119b6977.chunk.js","mappings":"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","sources":["Converstaion/ConvoDiv.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setNewMessage, clearNewMessage } from '../features/newMessage/newMessageSlice';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { io } from 'socket.io-client';\r\n\r\nexport default function ConvoDiv({ state, selectedUser, roomId, user }) {\r\n\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const newMessage = useSelector(state => state.newMessage); // Assuming newMessage state from Redux\r\n\r\n    const [conversation, setConversation] = useState(null);\r\n    const divRef = useRef(null);\r\n\r\n\r\n\r\n    const scrollToBottom = () => {\r\n        if (divRef.current) {\r\n            divRef.current.scrollTop = divRef.current.scrollHeight - divRef.current.clientHeight;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const formatStringForRendering = (inputString) => {\r\n        const urlRegex = /(https?:\\/\\/[^\\s]+)/;\r\n        const match = inputString?.match(urlRegex);\r\n\r\n        if (match) {\r\n            const url = match[0];\r\n            const message = inputString.replace(url, `<a href=\"${url}\" target=\"_blank\" rel=\"noopener noreferrer\">${url}</a>`);\r\n            return <span dangerouslySetInnerHTML={{ __html: message }} />;\r\n        } else {\r\n            return <span>{inputString}</span>;\r\n        }\r\n    };\r\n\r\n    const extractTimeFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        const amOrPm = hours >= 12 ? 'PM' : 'AM';\r\n        const formattedHours = hours % 12 || 12;\r\n        const newDate = extractDateFromDate(dateString);\r\n        return `| ${newDate} | ${formattedHours}:${minutes < 10 ? '0' + minutes : minutes} ${amOrPm}`;\r\n    };\r\n\r\n    const extractDateFromDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        const day = date.getDate();\r\n        const month = date.getMonth() + 1; // Months are zero-based, so we add 1\r\n        const year = date.getFullYear();\r\n        return `${day < 10 ? '0' + day : day}-${month < 10 ? '0' + month : month}-${year}`;\r\n    };\r\n\r\n    const fetchConversation = async (roomId) => {\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_BACKEND_URL}/conversation`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ conversationId: roomId }),\r\n            });\r\n            if (!response.ok) {\r\n                console.log('Error:', response.status, response.statusText);\r\n                return;\r\n            } else {\r\n                const conversationData = await response.json();\r\n                if (conversationData && conversationData.conversation.length > 0) {\r\n                    setConversation(conversationData.conversation);\r\n                } else {\r\n                    setConversation([]); // Set empty array if no conversation data\r\n                    const conversationDiv = document.getElementById('conversation');\r\n                    conversationDiv.innerHTML = `<div id=\"deaultConvo\">No conversation with ${selectedUser.username}</div>`;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching session:', error);\r\n        }\r\n    };\r\n\r\n    const parseMessage = (inputString) => {\r\n        const delimiter = '#$IMG$#';\r\n        const [message, url] = inputString?.split(delimiter); // Assuming inputString has the correct format\r\n\r\n        return { message, url }; // Return object with message and url properties\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        fetchConversation(roomId);\r\n    }, [roomId]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (selectedUser) {\r\n            setConversation(null);\r\n        }\r\n    }, [selectedUser]);\r\n\r\n    useEffect(() => {\r\n        if (newMessage) {\r\n            console.log(newMessage);\r\n            setConversation(prevConversation => [...prevConversation, newMessage]);\r\n            dispatch(clearNewMessage());\r\n        }\r\n    }, [newMessage, dispatch]);\r\n\r\n    useEffect(() => {\r\n\r\n        const socket = io(process.env.REACT_APP_BACKEND_URL);\r\n\r\n        socket.on('get_message', (data) => {\r\n            if (user.username === data.to.username) {\r\n                let newMessage = {\r\n                    date: new Date(),\r\n                    from: data.from.email,\r\n                    message: data.message\r\n                }\r\n                setConversation(prevConversation => [...prevConversation, newMessage]);\r\n                dispatch(clearNewMessage());\r\n                // alert(`${data.from.email} sent you a message ${data.message}`);\r\n            }\r\n        });\r\n\r\n        return () => {\r\n            socket.off('get_message');\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [newMessage, conversation]);\r\n\r\n\r\n    return (\r\n        <div ref={divRef} id=\"conversation\" name=\"conversation\" className=\"conversation\">\r\n            {conversation ? conversation?.map((message, index) => {\r\n\r\n\r\n\r\n                const { message: messageText, url } = parseMessage(message?.message);\r\n                const linkMessage = formatStringForRendering(messageText);\r\n                const from = message.from;\r\n                const email = user?.primaryEmailAddress.emailAddress;\r\n\r\n                return (\r\n                    <div key={index} className={from === email ? 'messageFromCurrentUser' : 'messageFromSecondUser'}>\r\n                        <div className=\"avatarContainer\">\r\n                            <img src={from === email ? user.imageUrl : selectedUser.image_url} alt={from === email ? user.username + ' image' : selectedUser.username + ' image'} />\r\n                        </div>\r\n                        <div className=\"textMessageCont\">\r\n                            {/* <h6>{from === email ? user.username : selectedUser.username}</h6> */}\r\n                            <h4>{linkMessage}</h4>\r\n                            {url &&\r\n                                <>\r\n                                    <img loading=\"lazy\" src={url} alt={messageText} />\r\n                                    <h4>{messageText}</h4>\r\n                                </>\r\n                            }\r\n                            <span>{extractTimeFromDate(message.date)}</span>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }) :\r\n                <div style={{\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                    gap: 10\r\n                }} id=\"conversation\" name=\"conversation\" className=\"conversation\">\r\n                    <CircularProgress />\r\n                    <p>Loading...</p>\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["ConvoDiv","_ref","state","selectedUser","roomId","user","dispatch","useDispatch","newMessage","useSelector","conversation","setConversation","useState","divRef","useRef","extractTimeFromDate","dateString","date","Date","hours","getHours","minutes","getMinutes","amOrPm","formattedHours","newDate","extractDateFromDate","concat","day","getDate","month","getMonth","year","getFullYear","useEffect","async","response","fetch","process","method","headers","body","JSON","stringify","conversationId","ok","console","log","status","statusText","conversationData","json","length","document","getElementById","innerHTML","username","error","fetchConversation","prevConversation","clearNewMessage","socket","io","on","data","to","from","email","message","off","current","scrollTop","scrollHeight","clientHeight","_jsx","ref","id","name","className","children","map","index","messageText","url","inputString","split","parseMessage","linkMessage","match","replace","dangerouslySetInnerHTML","__html","formatStringForRendering","primaryEmailAddress","emailAddress","_jsxs","src","imageUrl","image_url","alt","_Fragment","loading","style","display","alignItems","justifyContent","flexDirection","gap","CircularProgress"],"sourceRoot":""}